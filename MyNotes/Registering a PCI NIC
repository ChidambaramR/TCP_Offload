The kernel stores the parameters of a PCI device through the structure

struct pci_device_id{
	...
	vendor, class ..
}
class = NETWORK

PCI device drivers register and un-register with the kernel with the help of 

pci_register_driver / pci_unregister_driver.
The functions are found in drivers/pci/pci.c

There is an alias for pci_register_driver called pci_module_init which is the equivalent in the older versions. 

pci_device_id is an array which indicates what devices a driver can handle. Each PCI device is uniquely identified by a large collection of fields in the structure pci_device_id.

eg: static struct pci_device_id e100_id_table[] = {
INTEL_8255X_ETHERNET_DEVICE(0x1029, 0);
}

INTEL_8255X-ETHERNET_DEVICE(device_id, ich)
	PCI_VENDOR_ID_INTEL - Vendor ID assigned to INTEL
	
The module is init by e100_init_module. It internally calls pci_module_init. This function registers the driver and indirectly all the associated NIC's
The e100_driver contains the following.
Name - "E100"
id_table = e100_id_table
prob = e100_probe
	
BIG Picture of registering:
	PCI device drivers ( such as E100 device driver ) define an instance of PCI driver ( such as e100_driver ) and register with the PCI layer.
	When a device driver A is loaded, it registers with the PCI layer using pci_register_driver and providing its instance of pci_driver (e100_driver). The pci driver includes a vector with IDs of those PCI devices which it can drive. The PCI layer then uses that table to see what devices match in its list of detected PCI devices. 
	After matching the device, it calls the probe function associated with the driver. The probe function creates and registers the associated network device. 
