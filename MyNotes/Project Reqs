Network cards:
In the LAB, we are trying to build a new type of network card.

The way network card works:
	PCI card, memory, system and CPU. There is a NIC which plugs to outside world. Anytime the CPU wants to send out a packet, it creates a packet in the memory and tells the NIC to DMA to the NIC and send on the wire.
	If NIC receives pakcet, it does a DMA to the memory. It raises and interrupt and now the CPU looks at that location in memory to figure out what is in this packet.
	But here NIC is stupid. All it does is, here is some memory, send it out. There are smarter NIC's which have offload features in them such as
	Receive side scaling,
	Segmentation,
	CRC checksum computation.

This (eg, combines the packet together, computes the checksum) is done on the little chip in the NIC when a packet arrives and then DMA's the result. The CPU when it gets an interrupt does not need to all of these. The reverse is also true. The CPU wants to send a packet, it creates a packet and it does not compute the checksum. It leaves the field blank and tells the NIC that there is a new packet. The NIC DMA's the contents, computes the checksum and then sends out the result.
These are the features of E1000 NIC.

Our 1st step is to port all of these stuff on E1000 into our NIC so that it becomes the same and we will be adding more features in it. Step 1 is to bring to the same level as the E1000 NIC.

In lab, we are building a different type of NIC. It has a big processor on it. Goal is to do more work on the processor and less work on the CPU

Look at what are the special offload features that E1000 have, how do they interact with the Linux Kernel, what kind of support is needed in the Linux driver to allow these things to work.
Linux kernel has to co-ordinate with NIC about what has to be done. If the Linux kernel thinks the NIC is stupid, then it has to do everything. If the kernel knows that it doesnt have to do checksum, it doesnt put the checksum in and expectes the NIC to do it. It checks if the attached NIC has this feature. 

We have to figure out by looking at the Linux code, what are all of those features, how do they work, how do they interact with the kernel, how linux kernel supports these features.

What are the feautres, how are they integrated with the driver and the kernel today. 

Start looking at lxr / cross reference sites. Read lot of documentation for E1000 as that tells you about the details of the NIC. 

Look at documentation for offload features.


