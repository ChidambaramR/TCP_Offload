My understanding of TCP Offload:
	Usually, the processing of TCP/IP will be done by the stack. Since ethernet speeds have gone past 100MB and reached 10GB, it will be a huge burden on the CPU to process TCP/IP packets at such a large rate. So Offloading was introduced. Some bottlenecks identified were
Reassembling of out-of-order packets,
memory copies,
interrupts etc.
In high network traffic, the CPU has to dedicate most of its time to process network packets than processing the applications. TOE is the solution which limits the processing required by the CPU. TOE is embedded in the NIC or host bus adapter. A design would be like the following.
				
						Application
						    | |
						Operating System ( TCP / IP stack )
						    | |
						Hardware ( Traditional NIC with TOE adapter ( TCP/IP, MAC, PHY)

The intention is to reduce the work load of CPU and take the load on the hardware. A TOE can be implemented with a network processor and a firmware or specialized ASIC's. Mostly they offload TCP and IP processing from the host processor. This allows new protocols like iSCSI, Network Attached Storage. 
Before TOE, some OS's did offload by reducing compute intensive tasks to the adapters. One example of a simple offload is the IP Checksum offload. When the speed started increasing, this simple offload was not enough. 
TOE can be implemented in processor based solution or ASIC based solution. Processor based solutions were not fast but allowed more features to be implemented. ASIC based solutions were fast but was not flexible. Today, there are optimized ASIC's using multiple processing engines to provide ASIC like performance. 

Processor based Implementation:
================================
In one of the implementations of TOE, there is a network processor running a RTOS and the traditional MAC/PHY processing. The protocol processing from the host CPU is now offloaded to the network processor running a real time RTOS. This not only offloads the TCP from the host OS's stack, but also anyother protocols that are embedded in the stack of the RTOS provided the hardware has correct hooks to offload.

ASIC based implementation:
===========================
In another implementation, an ASIC is used, where TCP/IP processing is offloaded to performance optimized hardware. But this is not flexible.

Hybrid Implementation:
=======================
There are implementations which take advantage of both.   
