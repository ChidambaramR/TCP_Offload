1. When Linux kernel boots, all PCI buses and devices are scanned, and some kernel data structures are created to map these devices.  A data structure is created to map each discovered PCI device on the PCI bus . The pci_bus structure ( struct pci_bus ) is created for a PCI bus and a pci_dev structure ( struct pci_dev ) is created for each PCI device. There is a structure ( struct pci_device_id ) which contains fields like VENDOR, NAME etc that uniquely identifies this device. 

2. The kernel creates a linked list of all the PCI devices identified and does a matching when the driver for each device has been loaded. 

3.  Now the device drivers have to be loaded. It can happen in two ways. Either it is already built into the kernel or it is a loadable module which we have to do with "insmod *.ko" file ( which is our NetFPGA case ). 

4. When the module is initialized ("Function: nf10_init"), it gives a probe function ("Function: nf10_probe") to the PCI layer. This probe function takes care of most of the device's initialization. The device driver has a vector called "pci_id" which lists the set of devices it can support with which the kernel does the aforementioned mapping. 
   The Probe tries to initialize the following
   DMA Memory region
   IO/PORTS
   FEATURES ( I anticipate we should add something here like Checksum offload etc )
   BUFFER MASKS 
   IRQ etc..


5. The net_device structure is the main structure which is created for each network device. Our NF10 driver allocates this structure using "Function: alloc_netdev" under "Function nf10iface_probe".

6. This wrapper function calls "ether_setup" function which sets up the net_device structure. In our code, this is under "Function: nf10iface_init". This sets up parameters like
    TYPE,
    MAC_ADDRESS
    FLAGS
    BROADCAST etc 

7. The final stage of driver initialization is "register_netdevice". It is under the function "nf10iface_probe". It initializes the net_device fields. Assigns a unique id to the device. Adds the net_device structure to the global_list "dev_base". It checks the feature flags (Eg: Scatter-gather, hardware checksumming, TCP segmentation). It sets the __LINK_STATE_PRESENT and initializes the device's queue'ng discipline. It finally notifies all the subsystems via, netdev_notification chain.

8. The last part before a device can become operational is to enable the device. It should be explicitly enabled by the user. It is represented in the field "dev->open". It then sets the link state to __LINK_STATE_START and calls dev->activate. Finally it sets the state to NETDEV_UP.

